
import "msvcrt.dll", "scanf _scanf"

struct Equation
  var A,      type_dword
  var B,      type_dword
  var C,      type_dword
  var D,      type_qword
  var ptr,    type_ptr
  var nRoots, type_dword

  pfunc Input
  pfunc CalculateNroots
  pfunc Result
  pfunc Run
  pfunc Init
  pfunc CalculateD



  func CalculateD
    mov D, B
    mul D, B

    var temp, type_qword

    mov temp, A
    mul temp, C
    mul temp, 4

    sub D, temp

    print PRINT_STRING, "D = "
    print PRINT_NUMBER, D
    print PRINT_STRING, "\n"
  ret

  func Init

    lea ptr, A
    print PRINT_STRING, "Enter a:\n"
    call Input

    lea ptr, B
    print PRINT_STRING, "Enter b:\n"
    call Input

    lea ptr, C
    print PRINT_STRING, "Enter c:\n"
    call Input
  ret

  func Input
    init_stack_dump_point
    push ptr
    push "%d"
    jit_call_void _scanf
  ret

  func Run

    call Init

    call CalculateD

    call CalculateNroots

    call Result
  ret


  func CalculateNroots
    plabel startD
    plabel root0
    plabel root1
    plabel root2
    plabel rootInf
    plabel endCalculateNroots

    cmpr A, 0
    jne startD
    cmpr B, 0
    jne root1
    cmpr C, 0
    je rootInf
    jmp root0

    startD:
    cmpr D, 0
    jb root0
    je root1
    ja root2

    root0:
    push 0
    pop nRoots
    jmp endCalculateNroots

    root1:
    mov nRoots, 1
    jmp endCalculateNroots

    root2:
    mov nRoots, 2
    sqrt D
    jmp endCalculateNroots

    rootInf:
    push 3
    pop nRoots
    jmp endCalculateNroots

    endCalculateNroots:
  ret

  func Result
    plabel no_roots
    plabel one_root
    plabel two_roots
    plabel inf_roots
    plabel ZeroA
    plabel one_root_print
    plabel error
    plabel endResult


    cmpr nRoots, 0
    je no_roots
    cmpr nRoots, 1
    je one_root
    cmpr nRoots, 2
    je two_roots
    cmpr nRoots, 3
    je inf_roots

    jmp error


    no_roots:
    print PRINT_STRING, "0 roots\n"
    jmp endResult



    one_root:
    var x, type_dword

    cmpr A, 0
    je ZeroA

    mov x, -1
    mul x, B
    div x, A
    div x, 2
    jmp one_root_print

    ZeroA:
    mov x, -1
    mul x, C
    div x, B

    one_root_print:
    print PRINT_STRING, "1 root: "
    print PRINT_NUMBER, x
    print PRINT_STRING, "\n"
    jmp endResult



    two_roots:
    var x1, type_qword
    var x2, type_qword

    mov x1, -1

    mul x1, B
    add x1, D
    div x1, A
    div x1, 2

    mov x2, -1
    mul x2, B
    sub x2, D
    div x2, A
    div x2, 2

    print PRINT_STRING, "2 roots: "
    print PRINT_NUMBER, x1
    print PRINT_STRING, " "
    print PRINT_NUMBER, x2
    print PRINT_STRING, "\n"
    jmp endResult



    inf_roots:
    print PRINT_STRING, "inf roots\n"
    jmp endResult



    error:
    print PRINT_STRING, "Error occurred (invalid nRoots)\n"
    endResult:
  ret

struct_end

var equation, type_Equation

call equation.Run
