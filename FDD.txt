Planned features:
1.  Cross-Platform realization
2.  User-friendly error presentation
3.  SEH on MSVC or signal handling
4.  Debug system
5.  Standalone linker
6.  Registers on Jit
7.  Separate compilation
8.  Jit majority of cmds
9.  Mingw64
10. Integrate with Курс Горячево, add some personages
11. Architecture for adding personages
12. Integrate with КуМир
13. Multithread error intersection fix (signal handling global var)
14. Create different version of parser/runner with all symbols stored
15. Custom debug window
16. Stack on Jit

                        Risk/Knowledge
         +------------------------------------------>
         |                     |                    |
         | 8, 13, 15           | 1, 5, 7, 9, 12, 14 |
         |                     | 16                 |
         |                     |                    |
         |                     |                    |
         |                     |                    |
         |                   3 |                  4 |
Priority |_____________________|____________________|
         |                     |                    |
         | 2                   | 3, 4, 6, 10, 11    |
         |                     |                    |
         |                     |                    |
         |                     |                    |
         |                     |                    |
         |                   2 |                  1 |
         |_____________________|____________________|
         v

Square 1:

Starting by the most apparently annoying feature:
10: 
- Come back to Logo and reintegrate it
- Do some research on the optimal textbook form for personages export (apparently 4) on Курс Горячево
- Test the imported personage

Next feature, based on results from the previous one:
11:
- Chose another personage and estimate the max possible degree of generalization
- Develop the base skeleton to simplify personage adding
- (Optional) Develop a system of #defines to simplify personage adding even more

3:
- Implement custom signal handling functions (display some general info)
- Register them using 'signal' function (signal.htm)
- Global variable for more info about code execution
- Dump function in RunInstanceHandler class to save in file 

4: 
- Message box contains line number, command on line with max specs, stack dump
- Callback from jit to member function with no parameters, which calls MessageBox

6: 
- Implement proc_reg arg type
- Implement map for proc regs (std::string -> const) and autofill
- Implement ProcReg struct (CPURegisterInfo, size)
- Implement functions using proc_reg (push, pop, ...) with all combinations

